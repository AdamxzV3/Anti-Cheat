local ServerScriptService = game:GetService("ServerScriptService")
local HttpService = game:GetService("HttpService")
local _Workspace_ = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local Players = game:GetService("Players")
-------------------------------------------
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RemoteEvents = ReplicatedStorage:WaitForChild("RemoteEvents")
----------------------------------------------------------------------
local BodyParts = {"Left Arm", "Right Arm", "Left Leg", "Right Leg", "Humanoid"}
local WhitelistedStates = {0, 3, 5, 7, 8, 10, 12, 15}

local Webhook = "Replacewithyours"
local EmbedDebounce = false

function SendDiscord(text)
	if EmbedDebounce == true then return end
	EmbedDebounce = true
	
	local Data = {
		["embeds"] = {{
			["description"] = text
		}}
	}
	local EmbedData = HttpService:JSONDecode(Data)
	HttpService:PostAsync(Webhook, EmbedData)
	wait(0.5)
	EmbedDebounce = false
	end


-------------------------------------------------------
function Disconnect(Player, text)
	--Kicks player
	pcall(function()
		RemoteEvents.ChatMessageEvent:FireAllClients(Player.Name.."Was kicked from the game lol")
		SendDiscord(text)
		Player:Kick("No Hax please")
	end)
end

RemoteEvents.ClientKick.OnServerEvent:Connect(function(Player, Message)
	--Kicks Player
	pcall(function() SendDiscord(Message) end)
	pcall(function() Player:Kick("No Hax please") end)
end)

-- Changes game service names to random chars.
coroutine.resume(coroutine.create(function()
	-- Changes service names regularly
	while wait(math.random (10,15 )) do
		game:GetService("Workspace").Name = HttpService:GenerateGUID(true)
		game:GetService("Players").Name = HttpService:GenerateGUID(true)
		game:GetService("Lighting").Name = HttpService:GenerateGUID(true)
		game:GetService("ReplicatedFirst").Name = HttpService:GenerateGUID(true)
		game:GetService("ReplicatedStorage").Name = HttpService:GenerateGUID(true)
		game:GetService("ServerScriptService").Name = HttpService:GenerateGUID(true)
		game:GetService("ServerStorage").Name = HttpService:GenerateGUID(true)
		game:GetService("StarterGui").Name = HttpService:GenerateGUID(true)
		game:GetService("Chat").Name = HttpService:GenerateGUID(true)
	end
end))

--Prevents Disco.
Lighting:GetPropertyChangedSignal("Ambient"):Connect(function()
	-- Edit this lighting propety, (There will be multiple of these)
	Lighting.OutdoorAmbient = Color3.fromRGB(138, 138, 138)
end)


Lighting:GetPropertyChangedSignal("OutdoorAmbient"):Connect(function()
	-- Edit this lighting propety, (There will be multiple of these)
	Lighting.Ambient = Color3.fromRGB(70, 70, 70)
end)



Lighting:GetPropertyChangedSignal("Brightness"):Connect(function()
	-- Edit this lighting propety, (There will be multiple of these)
	Lighting.Brightness = 2
end)

ServerScriptService.ChildAdded:Connect(function(Child)
	-- Detects objects being inserted into SSS
	--Note : Keep your SSS items in folders,  and not parent to the service itself
	if Child.Name ~= "ChatServiceRunner" then
		pcall(function()
			Child:Destroy()
		end)
	end
end)



--Same thing as above but in ReplicatedStorage.
--Remote Events can be inserted into the game to carry out server- sided exploits .
--Make sure to keep yaur stuff inside folders otherwise they 're gonna get deleted.
ReplicatedStorage.ChildAdded:Connect(function(Child)
	if not Child:IsA("Folder") then
		Child:Destroy()
	end
end)

Players.PlayerAdded:Connect(function(Player)
	Player.CharacterAdded:Connect(function(Character)
		-- Characters events.
		--Anti Fly
		
		local Humanoid = Character:WaitForChild("Humanoid")
		local function CheckMagnitude()
			if not Character:FindFirstChild("HumanoidRootPart") then return end
			local PreviousPosition = Character.HumanoidRootPart.Position
			local PreviousState = Humanoid:GetState()
			------------------------------------------------
			
			delay(1, function()
				-- Below checks if they have travekked iver 25 studs in 1 second
				if (Character.HumanoidRootPart.Position - PreviousPosition).Magnitude >= 25 then
					wait(0.1)
					--Ignores if their HumanoidState Was normal before
					
					if table.find(WhitelistedStates, Humanoid:GetState().Value) or table.find(WhitelistedStates, PreviousPosition) then return end
					--Ignores if they are standing on air or dead
					if Humanoid.FloorMaterial ~= Enum.Material.Air or Humanoid.Health == 0 then return end
					Disconnect(Player, Player.Name.."Was caught flying") -- Calls the function above, we made earlier.
						
				end
			end)
		end
		--Trying to hide it as best as possible
		local function CloneClientAntiExploit()
			pcall(function()
				local Descendants = Player:GetDescendants()
				for _, v in pairs(Character:GetDescendants()) do table.insert(Descendants, v ) end
					table.remove(Descendants, (table.find(Descendants, Player.PlayerGui)))
				
					
				
			    local ClonedAntiExploit = script.ClientAntiExploit:Clone()
			    ClonedAntiExploit.Name = HttpService:GenerateGUID(true) --Randomized the name
			
			    ClonedAntiExploit.Parent = Descendants[math.random(1, #Descendants)]
				ClonedAntiExploit.Disabled = false
				wait(15) --wait time before respawn
				CloneClientAntiExploit:Destroy()
			end)
		end
		
		coroutine.resume(coroutine.create(function()
			while wait(1) do
				CheckMagnitude()
		end
		end))
		
		coroutine.resume(coroutine.create(function()
			CloneClientAntiExploit()
			while wait(15) do --you can change waittime
				CheckMagnitude()
				CloneClientAntiExploit()
			end
		end))
		
		Humanoid.StateChanged:Connect(function(PreviousState, NewState)
			if NewState == Enum.HumanoidStateType.PlatformStanding then
				Disconnect(Player)
			end
		end)
		
		Character.ChildRemoved:Connect(function(child)
			if table.find(BodyParts, child.Name) then
				Disconnect(Player, Player.Name.."'s "..child.Name.." was removed.")
		end
	   end)
	end)
end)

